# Script automatically generated by Mantid on Fri May  4 10:14:53 2012
import sys
import os
if (os.environ.has_key("MANTIDPATH")):
    del os.environ["MANTIDPATH"]
sys.path.insert(0,'/opt/mantidnightly/bin')
from MantidFramework import mtd
mtd.initialize()
from mantidsimple import *

eventFileAbs=sys.argv[1]
outputDir=sys.argv[2]

eventFile = os.path.split(eventFileAbs)[-1]
nexusDir = eventFileAbs.replace(eventFile, '')
runNumber = eventFile.split('_')[2]
configService = mtd.getSettings()
dataSearchPath = configService.getDataSearchDirs()
dataSearchPath.append(nexusDir)
configService.setDataSearchDirs(dataSearchPath)


# Place holder for python script
file_path = os.path.join(outputDir, 'REF_M_'+runNumber+'.py')
f=open(file_path,'w')
f.write("runNumber=\%s \% runNumber\n")
f.write("""# REF_M automated reduction
estimates = RefEstimates(RunNumber=runNumber)
peak_min = estimates.getProperty('PeakMin').value
peak_max = estimates.getProperty('PeakMax').value
ref_pixel = (peak_max+peak_min)/2.0

estimates = RefEstimates(RunNumber=11397)
peak_min_norm = estimates.getProperty('PeakMin').value
peak_max_norm = estimates.getProperty('PeakMax').value

RefReduction(DataRun=runNumber,
              NormalizationRun=11397,
              Instrument='REF_M',
              PolarizedData=True,
              SignalPeakPixelRange=[peak_min, peak_max],
              SubtractSignalBackground=False,
              PerformNormalization=True,
              NormPeakPixelRange=[peak_min_norm, peak_max_norm],
              SubtractNormBackground=False,
              CropLowResDataAxis=False,
              CropLowResNormAxis=False,
              OutputWorkspacePrefix='reflectivity_'+runNumber)
""")
f.close()

xml_str = """<Reduction>
  <instrument_name>REFM</instrument_name>
  <timestamp>Fri May  4 10:14:53 2012</timestamp>
  <python_version>2.6.6 (r266:84292, Sep 15 2010, 16:41:53) 
[GCC 4.4.5]</python_version>
  <mantid_version>2.0.2345</mantid_version>
<RefMData>
<from_peak_pixels>79</from_peak_pixels>
<to_peak_pixels>114</to_peak_pixels>
<background_flag>True</background_flag>
<back_roi1_from>162</back_roi1_from>
<back_roi1_to>180</back_roi1_to>
<back_roi2_from>0</back_roi2_from>
<back_roi2_to>0</back_roi2_to>
<crop_tof>True</crop_tof>
<from_tof_range>9000.0</from_tof_range>
<to_tof_range>27600.0</to_tof_range>
<tof_step>400.0</tof_step>
<data_sets>runNumber</data_sets>
<x_min_pixel>109</x_min_pixel>
<x_max_pixel>163</x_max_pixel>
<x_range_flag>False</x_range_flag>
<norm_flag>True</norm_flag>
<norm_x_range_flag>False</norm_x_range_flag>
<norm_x_max>160</norm_x_max>
<norm_x_min>90</norm_x_min>
<norm_from_peak_pixels>227</norm_from_peak_pixels>
<norm_to_peak_pixels>238</norm_to_peak_pixels>
<norm_background_flag>True</norm_background_flag>
<norm_from_back_pixels>118</norm_from_back_pixels>
<norm_to_back_pixels>155</norm_to_back_pixels>
<norm_dataset>11397</norm_dataset>
<q_min>0.0025</q_min>
<q_step>-0.01</q_step>
<q_bins>40</q_bins>
<q_log>True</q_log>
<theta>0.0</theta>
<use_center_pixel>True</use_center_pixel>
<set_detector_angle>False</set_detector_angle>
<detector_angle>7.978</detector_angle>
<set_detector_angle_offset>False</set_detector_angle_offset>
<detector_angle_offset>4.8</detector_angle_offset>
<set_direct_pixel>True</set_direct_pixel>
<direct_pixel>231.0</direct_pixel>
<output_dir></output_dir>
</RefMData>
</Reduction>
"""
xml_str = xml_str.replace('runNumber', "%s") % runNumber

# Reduction options for loading into Mantid
file_path = os.path.join(outputDir, 'REF_M_'+runNumber+'.xml')
f=open(file_path,'w')
f.write(xml_str)
f.close()
# REF_M automated reduction
estimates = RefEstimates(RunNumber=runNumber)
peak_min = estimates.getProperty('PeakMin').value
peak_max = estimates.getProperty('PeakMax').value
ref_pixel = (peak_max+peak_min)/2.0

estimates = RefEstimates(RunNumber=11397)
peak_min_norm = estimates.getProperty('PeakMin').value
peak_max_norm = estimates.getProperty('PeakMax').value

RefReduction(DataRun=runNumber,
              NormalizationRun=11397,
              Instrument='REF_M',
              PolarizedData=True,
              SignalPeakPixelRange=[peak_min, peak_max],
              SubtractSignalBackground=False,
              PerformNormalization=True,
              NormPeakPixelRange=[peak_min_norm, peak_max_norm],
              SubtractNormBackground=False,
              CropLowResDataAxis=False,
              CropLowResNormAxis=False,
              OutputWorkspacePrefix='reflectivity_'+runNumber)

for item in mtd.keys():
    if item.startswith('reflectivity_'):
        file_name = item+'.txt'
        file_path = os.path.join(outputDir,file_name)
        SaveAscii(Filename=file_path,
          InputWorkspace=item,
          Separator='Tab',
          CommentIndicator='# ')
